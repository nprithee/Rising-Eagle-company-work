library(plotly)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Product Type`, data = df, sum)
library(ggplot2)
library(plotly)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Create a line plot of quantity bought
p <- ggplot(gpca_table, aes(x = `Item #`, group = `Product Type`)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Bought", title = "Quantity Bought Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Convert ggplot object to plotly
p <- ggplotly(p, tooltip = "text")
library(ggplot2)
library(plotly)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Create a line plot of quantity bought
p <- ggplot(gpca_table, aes(x = `Item #`, group = `Type`)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Bought", title = "Quantity Bought Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Convert ggplot object to plotly
p <- ggplotly(p, tooltip = "text")
# Add product type labels on click
p <- p %>% onRender("
function(el) {
el.on('plotly_click', function(d) {
var point = d.points[0];
var text = point.text.split('<br>')[1];
var x = point.x;
var y = point.y;
var label = new Label({
x: x,
y: y,
text: text,
borderColor: 'black',
backgroundColor: 'white'
}).addToPlotly(point.fullData.uid);
});
}
")
df$`Average Unit Price 01/01/21 to 12/31/21` <- as.numeric(gsub("[$,]", "", df$`Average Unit Price 01/01/21 to 12/31/21`))
htmlwidgets::onRender()
install.packages(jscode)
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
library(ezids)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(htmlwidgets)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Create a line plot of quantity bought
p <- ggplot(gpca_table, aes(x = `Item #`, group = `Type`)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Bought", title = "Quantity Bought Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Convert ggplot object to plotly
p <- ggplotly(p, tooltip = "text")
# Define JavaScript code for handling click events
click_code <- "
function(el, x, data) {
function handleClick(event) {
var point = event.points[0];
var text = point.text.split('<br>')[1];
var x = point.x;
var y = point.y;
var label = new Label({
x: x,
y: y,
text: text,
borderColor: 'black',
backgroundColor: 'white'
}).addToPlotly(point.fullData.uid);
}
el.on('plotly_click', handleClick);
}
"
# Wrap the plotly object with htmlwidgets::onRender()
p <- onRender(p, click_code)
# Print the interactive plot
p
library(ggplot2)
library(plotly)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Product Type`, data = df, sum)
library(ggplot2)
library(plotly)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Create a line plot of quantity bought
p <- ggplot(gpca_table, aes(x = `Item #`, group = `Type`)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Bought", title = "Quantity Bought Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Convert ggplot object to plotly
p <- ggplotly(p)
# Add custom click event handling
p <- p %>% onRender("
function(el) {
el.on('plotly_click', function(data) {
var point = data.points[0];
var productType = point.data.text;
var annotation = {
x: point.x,
y: point.y,
text: productType,
showarrow: false,
font: {
size: 12,
color: 'black'
},
xref: 'x',
yref: 'y'
};
Plotly.relayout(el.id, {annotations: [annotation]});
});
}
")
# Print the interactive plot
p
library(ggplot2)
# Group the data by Item # and Description and sum the quantity buy for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description`, data = df, sum)
# Create a line plot of quantity buy
ggplot(gpca_table, aes(x = `Item #`, group = 1)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Buy", title = "Quantity Buy Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(ggplot2)
library(plotly)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Create a line plot of quantity bought
p <- ggplot(gpca_table, aes(x = `Item #`, group = `Type`)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Bought", title = "Quantity Bought Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Convert ggplot object to plotly
p <- ggplotly(p)
# Add product type label on top of each spike
p <- p %>% layout(
annotations = lapply(unique(gpca_table$`Product Type`), function(ptype) {
spike_x <- gpca_table$`Item #`[gpca_table$`Product Type` == ptype]
spike_y <- gpca_table$`Qty Sold 01/01/21 to 12/31/21`[gpca_table$`Product Type` == ptype]
list(
x = spike_x[length(spike_x)],
y = spike_y[length(spike_y)],
text = ptype,
showarrow = FALSE,
font = list(
size = 12,
color = "black"
),
xref = "x",
yref = "y",
xanchor = "center",
yanchor = "bottom"
)
})
)
# Print the interactive plot
p
library(ggplot2)
# Group the data by Item # and Description and sum the quantity buy for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description`, data = df, sum)
# Create a line plot of quantity buy
ggplot(gpca_table, aes(x = `Item #`, group = 1)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Buy", title = "Quantity Buy Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(ggplot2)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Create a line plot of quantity bought
ggplot(gpca_table, aes(x = `Item #`, group = 1)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Buy", title = "Quantity Buy Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(label = `Type`), vjust = -0.5)
library(ggplot2)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Create a line plot of quantity bought
ggplot(gpca_table, aes(x = `Item #`, group = 1)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Buy", title = "Quantity Buy Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(label = `Type`, y = `Qty Sold 01/01/21 to 12/31/21`), vjust = -0.5)
library(ggplot2)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Find the maximum value of Qty Sold 01/01/21 to 12/31/21
max_qty <- max(gpca_table$`Qty Sold 01/01/21 to 12/31/21`)
# Create a line plot of quantity bought
ggplot(gpca_table, aes(x = `Item #`, group = 1)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Buy", title = "Quantity Buy Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(label = ifelse(`Qty Sold 01/01/21 to 12/31/21` == max_qty, as.character(`Type`), ""), y = `Qty Sold 01/01/21 to 12/31/21`), vjust = -0.5)
library(ggplot2)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Product Type`, data = df, sum)
library(ggplot2)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Calculate the threshold values for identifying large and medium spikes
max_qty <- max(gpca_table$`Qty Sold 01/01/21 to 12/31/21`)
large_threshold <- max_qty * 0.8  # Adjust the threshold as needed
medium_threshold <- max_qty * 0.5  # Adjust the threshold as needed
# Create a line plot of quantity bought
ggplot(gpca_table, aes(x = `Item #`, group = 1)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Buy", title = "Quantity Buy Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(label = ifelse(`Qty Sold 01/01/21 to 12/31/21` >= large_threshold | `Qty Sold 01/01/21 to 12/31/21` >= medium_threshold, as.character(`Type`), ""), y = `Qty Sold 01/01/21 to 12/31/21`), vjust = -0.5)
library(ggplot2)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Calculate the threshold values for identifying large and medium spikes
max_qty <- max(gpca_table$`Qty Sold 01/01/21 to 12/31/21`)
large_threshold <- max_qty * 0.8  # Adjust the threshold as needed
medium_threshold <- max_qty * 0.1  # Adjust the threshold as needed
# Create a line plot of quantity bought
ggplot(gpca_table, aes(x = `Item #`, group = 1)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Buy", title = "Quantity Buy Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(label = ifelse(`Qty Sold 01/01/21 to 12/31/21` >= large_threshold | `Qty Sold 01/01/21 to 12/31/21` >= medium_threshold, as.character(`Type`), ""), y = `Qty Sold 01/01/21 to 12/31/21`), vjust = -0.5)
library(ggplot2)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Calculate the threshold values for identifying large and medium spikes
max_qty <- max(gpca_table$`Qty Sold 01/01/21 to 12/31/21`)
large_threshold <- max_qty * 0.8  # Adjust the threshold as needed
medium_threshold <- max_qty * 0.1  # Adjust the threshold as needed
# Create a line plot of quantity bought
ggplot(gpca_table, aes(x = `Item #`, group = 1)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Buy", title = "Quantity Buy Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(label = ifelse(`Qty Sold 01/01/21 to 12/31/21` >= large_threshold | `Qty Sold 01/01/21 to 12/31/21` >= medium_threshold, as.character(`Type`), ""), y = `Qty Sold 01/01/21 to 12/31/21`), vjust = -0.5)
# Convert the average unit price columns from strings to numeric values
df$`Average Unit Price 01/01/21 to 12/31/21` <- as.numeric(gsub("[$,]", "", df$`Average Unit Price 01/01/21 to 12/31/21`))
df$`Average Unit Price 01/01/20 to 12/31/20` <- as.numeric(gsub("[$,]", "", df$`Average Unit Price 01/01/20 to 12/31/20`))
# Calculate the percentage change
df$`Percentage Change` <- ((df$`Average Unit Price 01/01/21 to 12/31/21` - df$`Average Unit Price 01/01/20 to 12/31/20`) / df$`Average Unit Price 01/01/20 to 12/31/20`) * 100
library(plotly)
# Create an interactive bar chart with labels and percentage change values
plot_ly(df, x = ~`Item #`, y = ~`Percentage Change`, type = "bar", text = ~paste("Type: ", `Type`), hoverinfo = "text",
marker = list(color = "blue")) %>%
add_text(x = ~`Item #`, y = ~`Percentage Change`, text = ~paste(sprintf("%.1f%%", `Percentage Change`)), textposition = "outside",
hoverinfo = "none", showlegend = FALSE) %>%
layout(xaxis = list(title = "Item #"), yaxis = list(title = "Percentage Change"),
title = "Percentage Change of Average Unit Price (2020 to 2021)",
hoverlabel = list(bgcolor = "white", font = list(color = "black")))
library(ggplot2)
# Group the data by Item #, Description, and Product Type and sum the quantity bought for 2020-2021
gpca_table <- aggregate(cbind(`Qty Sold 01/01/21 to 12/31/21`, `Qty Sold 01/01/20 to 12/31/20`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Calculate the threshold values for identifying large and medium spikes
max_qty <- max(gpca_table$`Qty Sold 01/01/21 to 12/31/21`)
large_threshold <- max_qty * 1.0  # Adjust the threshold as needed
medium_threshold <- max_qty * 0.1  # Adjust the threshold as needed
# Create a line plot of quantity bought
ggplot(gpca_table, aes(x = `Item #`, group = 1)) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/20 to 12/31/20`, color = "Qty Sold 2020"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Buy", title = "Quantity Buy Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2021", "Qty Sold 2020")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(label = ifelse(`Qty Sold 01/01/21 to 12/31/21` >= large_threshold | `Qty Sold 01/01/21 to 12/31/21` >= medium_threshold, as.character(`Type`), ""), y = `Qty Sold 01/01/21 to 12/31/21`), vjust = -0.5)
library(readr)
library(ggplot2)
df <- read_csv('/Users/nusratprithee/Documents/Rising-Eagle-company-work/Purchase History with Average Unit Price - 2021 vs. 2022.csv')
# Get unique values from the "Type" column
unique_types <- unique(df$Type)
# Print each unique type
for (type in unique_types) {
print(paste("Product Type:", as.character(type)))
}
# Convert the average unit price columns from strings to numeric values
df$`Average Unit Price 01/01/22 to 12/31/22` <- as.numeric(gsub("[$,]", "", df$`Average Unit Price 01/01/22 to 12/31/22`))
df$`Average Unit Price 01/01/21 to 12/31/21` <- as.numeric(gsub("[$,]", "", df$`Average Unit Price 01/01/21 to 12/31/21`))
# Calculate the percentage change
df$`Percentage Change` <- ((df$`Average Unit Price 01/01/22 to 12/31/22` - df$`Average Unit Price 01/01/21 to 12/31/21`) / df$`Average Unit Price 01/01/21 to 12/31/21`) * 100
library(plotly)
# Create an interactive bar chart with labels and percentage change values
plot_ly(df, x = ~`Item #`, y = ~`Percentage Change`, type = "bar", text = ~paste("Type: ", `Type`), hoverinfo = "text",
marker = list(color = "blue")) %>%
add_text(x = ~`Item #`, y = ~`Percentage Change`, text = ~paste(sprintf("%.1f%%", `Percentage Change`)), textposition = "outside",
hoverinfo = "none", showlegend = FALSE) %>%
layout(xaxis = list(title = "Item #"), yaxis = list(title = "Percentage Change"),
title = "Percentage Change of Average Unit Price (2020 to 2021)",
hoverlabel = list(bgcolor = "white", font = list(color = "black")))
# Group the data by Item # and Description and sum the quantity sold for 2021-2022
gpca_table <- aggregate(cbind(`Qty Sold 01/01/22 to 12/31/22`, `Qty Sold 01/01/21 to 12/31/21`) ~ `Item #` + `Description` + `Type`, data = df, sum)
# Calculate the threshold values for identifying large and medium spikes
max_qty <- max(gpca_table$`Qty Sold 01/01/22 to 12/31/22`)
large_threshold <- max_qty * 1.0  # Adjust the threshold as needed
medium_threshold <- max_qty * 0.1  # Adjust the threshold as needed
# Create a line plot of quantity sold
ggplot(gpca_table, aes(x = `Item #`, group = 1)) +
geom_line(aes(y = `Qty Sold 01/01/22 to 12/31/22`, color = "Qty Sold 2022"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/22 to 12/31/22`, color = "Qty Sold 2022"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 1) +
geom_point(aes(y = `Qty Sold 01/01/21 to 12/31/21`, color = "Qty Sold 2021"), size = 2) +
geom_line(aes(y = `Qty Sold 01/01/22 to 12/31/22`, linetype = "White Year"), color = "black", size = 1, linetype = "dashed") +
labs(x = "Item #", y = "Quantity Buy", title = "Quantity Buy Comparison") +
scale_color_manual(values = c("blue", "red"), labels = c("Qty Sold 2022", "Qty Sold 2021")) +
scale_shape_manual(values = c(16, 16)) +
scale_linetype_manual(values = "dashed", labels = "White Year") +
guides(color = guide_legend(override.aes = list(size = 2))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(label = ifelse(`Qty Sold 01/01/22 to 12/31/22` >= large_threshold | `Qty Sold 01/01/22 to 12/31/22` >= medium_threshold, as.character(`Type`), ""), y = `Qty Sold 01/01/22 to 12/31/22`), vjust = -0.5)
library(readr)
# Convert the average unit price columns from strings to numeric values
df$`Average Unit Price 01/01/22 to 12/31/22` <- as.numeric(gsub("[$,]", "", df$`Average Unit Price 01/01/22 to 12/31/22`))
df$`Average Unit Price 01/01/21 to 12/31/21` <- as.numeric(gsub("[$,]", "", df$`Average Unit Price 01/01/21 to 12/31/21`))
# Calculate the overall percentage change
overall_percentage_change <- ((sum(df$`Average Unit Price 01/01/22 to 12/31/22`) - sum(df$`Average Unit Price 01/01/21 to 12/31/21`)) / sum(df$`Average Unit Price 01/01/21 to 12/31/21`)) * 100
# Print the overall percentage change
cat("Overall Percentage Change: ", overall_percentage_change, "%", "\n")
# Create a data frame for the overall percentage change
data <- data.frame(Year = c("2021", "2022"), Percentage_Change = c(0, overall_percentage_change))
# Create a line graph
ggplot(data, aes(x = Year, y = Percentage_Change, group = 1)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "blue", size = 3) +
labs(x = "Year", y = "Percentage Change", title = "Overall Percentage Change of Average Unit Price") +
geom_text(aes(label = paste0(Percentage_Change, "%")), vjust = -0.5, size = 4, hjust = -0.2) +
theme_minimal()
# Calculate the overall percentage change for each type
overall_percentage_change <- aggregate(Percentage_Change ~ Type, data = df, FUN = function(x) sum(x, na.rm = TRUE))
library(readr)
library(ggplot2)
df <- read_csv('/Users/nusratprithee/Documents/Rising-Eagle-company-work/Purchase-History-with-Average-Unit-Price-2020-vs.-2021.csv')
# Get unique values from the "Type" column
unique_types <- unique(df$Type)
# Print each unique type
for (type in unique_types) {
print(paste("Product Type:", as.character(type)))
}
# Convert the average unit price columns from strings to numeric values
df$`Average Unit Price 01/01/21 to 12/31/21` <- as.numeric(gsub("[$,]", "", df$`Average Unit Price 01/01/21 to 12/31/21`))
df$`Average Unit Price 01/01/20 to 12/31/20` <- as.numeric(gsub("[$,]", "", df$`Average Unit Price 01/01/20 to 12/31/20`))
# Calculate the percentage change
df$`Percentage Change` <- ((df$`Average Unit Price 01/01/21 to 12/31/21` - df$`Average Unit Price 01/01/20 to 12/31/20`) / df$`Average Unit Price 01/01/20 to 12/31/20`) * 100
library(plotly)
# Create an interactive bar chart with labels and percentage change values
plot_ly(df, x = ~`Item #`, y = ~`Percentage Change`, type = "bar", text = ~paste("Type: ", `Type`), hoverinfo = "text",
marker = list(color = "blue")) %>%
add_text(x = ~`Item #`, y = ~`Percentage Change`, text = ~paste(sprintf("%.1f%%", `Percentage Change`)), textposition = "outside",
hoverinfo = "none", showlegend = FALSE) %>%
layout(xaxis = list(title = "Item #"), yaxis = list(title = "Percentage Change"),
title = "Percentage Change of Average Unit Price (2020 to 2021)",
hoverlabel = list(bgcolor = "white", font = list(color = "black")))
# Calculate the overall percentage change for each type
overall_percentage_change <- aggregate(Percentage_Change ~ Type, data = df, FUN = function(x) sum(x, na.rm = TRUE))
# Calculate the overall percentage change for each type
overall_percentage_change <- aggregate(`Percentage Change` ~ Type, data = df, FUN = function(x) sum(x, na.rm = TRUE))
# Print the overall percentage change for each type
print(overall_percentage_change)
library(ggplot2)
# Calculate the overall percentage change for each type
overall_percentage_change <- aggregate(`Percentage Change` ~ Type, data = df, FUN = function(x) sum(x, na.rm = TRUE))
# Create a bar plot of the overall percentage change
ggplot(overall_percentage_change, aes(x = Type, y = `Percentage Change`)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Type", y = "Overall Percentage Change",
title = "Overall Percentage Change of Each Type") +
theme_minimal()
library(ggplot2)
# Calculate the overall percentage change for each type
overall_percentage_change <- aggregate(`Percentage Change` ~ Type, data = df, FUN = function(x) sum(x, na.rm = TRUE))
# Create a bar plot of the overall percentage change with labels
ggplot(overall_percentage_change, aes(x = Type, y = `Percentage Change`)) +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = paste0(round(`Percentage Change`, 2), "%")), vjust = -0.5) +
labs(x = "Type", y = "Overall Percentage Change",
title = "Overall Percentage Change of Each Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
library(ggplot2)
# Calculate the overall percentage change for each type
overall_percentage_change <- aggregate(`Percentage Change` ~ Type, data = df, FUN = function(x) sum(x, na.rm = TRUE))
# Create a bar plot of the overall percentage change with labels
ggplot(overall_percentage_change, aes(x = reorder(Type, `Percentage Change`), y = `Percentage Change`)) +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = paste0(round(`Percentage Change`, 2), "%")), vjust = -0.5) +
labs(x = "Type", y = "Overall Percentage Change",
title = "Overall Percentage Change of Each Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
